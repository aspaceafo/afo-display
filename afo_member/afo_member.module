<?php
// $Id$

/**
 * @file
 *
 * AFO Membership functions.
 */

/********************************** settings **/
function afo_member_payment_status_settings() {
	return array(
		1 => 'pending',
		2 => 'paid',
	);
}
function afo_member_membership_status_settings() {
	return array(
		1 => 'free account',
		2 => 'paid member account',
		3 => 'paid member account (lapsed)',
		4 => 'paid member account (pending)',
	);
}

/********************************** drupal functions **/

/**
 * Implementation of hook_menu.
 */
function afo_member_menu() {
	
	$items['membership'] = array(
		'title' => 'Local Artists Membership',
		'page callback' => 'afo_member_membership_page',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'afo_member.memberpage.inc',
	);

	$items['editor/payments'] = array(
		'title' => 'Member Payments',
		'page callback' => 'afo_member_editor_payments',
		'access arguments' => array('administer payments'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'afo_member.editor.inc',
	);

	$items['editor/payment/edit'] = array(
		'title' => 'Edit Payment',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('afo_member_create_payment_form'),
		'access arguments' => array('administer payments'),
		'type' => MENU_CALLBACK,
		'file' => 'afo_member.editor.inc',
	);

	$items['admin/settings/afo/member'] = array(
		'title' => 'Membership Settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('afo_member_admin_settings'),
		'access arguments' => array('administer content'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'afo_member.admin.inc',
	);
	
	return $items;
}

/**
 * Implementation of hook_perm.
 */
function afo_member_perm() {
	return array('administer payments');
}

/**
 * Implementation of hook_theme.
 */
function afo_member_theme() {
	return array(

		'afo_member_payments_table' => array(
			'arguments' => array(
				'data' => null,
				'args' => null,
			),
			'file' => 'afo_member.paymentstable.inc',
		),
	);
}

/**
 * implements hook_form_alter
 */
function afo_member_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_view_form') {
  	unset($form['items']['#columns']['image']);
  	$form['items']['#columns']['desc']['cell'] = t('Description');
    foreach ($form['items'] as $k => $item) {
      if (is_array($item) && isset($item['qty']) && afo_member_is_single_type($item)) {
        $form['items'][$k]['qty']['#type'] = 'value';
        $form['items'][$k]['qty']['#value'] = 1;
      }
    }  
  }    
}
/**
 * Check if an item should not have quantity in cart.
 */
function afo_member_is_single_type($item){
  if(is_array($item['nid']) && isset($item['nid']['#value'])){
    $nid = $item['nid']['#value'];
    $result = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $nid));
    if($result == "product") return true;
  }    
  return false;
}

/**
* Implementation of hook_ca_predicate().
*/
function afo_member_ca_predicate() {
  $predicates['afo_member_add_payment_do'] = array(
    '#title' => t('Add membership payment record'),
    '#description' => t('Custom Local Artists membership payment record.'),
    '#class' => 'order',
    '#status' => 1,
    '#trigger' => 'uc_checkout_complete',
    '#weight' => 3,
    '#conditions' => array(
      '#operator' => 'AND',
      '#conditions' => array(
        array(
          '#name' => 'uc_order_status_condition',
          '#title' => t('If the order status is not still In Checkout.'),
          '#argument_map' => array(
            'order' => 'order',
          ),
          '#settings' => array(
            'negate' => TRUE,
            'order_status' => 'in_checkout',
          ),
        ),
      ),
    ),
    '#actions' => array(
      array(
        '#name' => 'afo_member_add_payment',
        '#title' => t('Add AFO membership payment record'),
        '#argument_map' => array(
          'order' => 'order',
        ),
        '#settings' => array(
        ),
      ),
    ),
  );

  return $predicates;
}
/**
* Implementation of hook_ca_action().
* Define conditional actions for ubercart
*/
function afo_member_ca_action() {

	// order args, taken from uc_order_ca_action
	$order_arg = array(
		'#entity' => 'uc_order',
		'#title' => t('Order'),
	); 
	// create payment record when 
	$actions['afo_member_add_payment'] = array(
		'#title' => t('Add AFO membership payment record'),
		'#category' => t('Order'),
		'#callback' => 'afo_member_add_payment_from_uc',
		'#arguments' => array(
		  'order' => $order_arg,
		),
	);
	
	return $actions;
} 

/**
 * Implements hook_nodeapi
 */
function afo_member_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
	if($node->type == 'product') {
		switch($op) {
			case 'view':
				global $user;
				if($user->uid===0) {
					drupal_set_message(t('You must have a user account to upgrade to a member. Please log in or create a new account.'), 'warning');
					drupal_goto('sign-in');
				}
				break;
		}
	}
}

/********************************** membership functions **/

/**
 * Update user role based on payments status
 */
function afo_member_update_role($uid) {
	if(!is_numeric($uid)) return false;
	
	// user
	$user_obj = user_load($uid);
	if(!is_object($user_obj)) return false;
	
	// roles
	$rid['artist'] = variable_get('afo_custommenu_roles_artist', null);
	$rid['member'] = variable_get('afo_custommenu_roles_artist_member', null);
	
	// status
	$status = afo_member_get_status($uid);
	$status_types = afo_member_membership_status_settings();
	$user_status = $status_types[$status['status']];

	// determine actions
	if($user_status == 'free account' || $user_status == 'paid member account (lapsed)' || $user_status == 'paid member account (pending)') {
		// if status is free account, lapsed, or pending, but role is attached, remove role
		if(key_exists($rid['member'], $user_obj->roles)) {
			$member_role_op = 'remove_role';
		}
	}
	elseif($user_status == 'paid member account') {
		// if status is paid up but no role attached and is artist type, then add role
		if(!key_exists($rid['member'], $user_obj->roles) && key_exists($rid['artist'], $user_obj->roles)) {
			$member_role_op = 'add_role';
		}			
	}

	// do actions
	if($member_role_op) {
		$site_mode = variable_get('afo_member_site_mode', null);
//		if($site_mode && $site_mode != 'beta') {
			user_multiple_role_edit(array($uid), $member_role_op, $rid['member']);
			drupal_set_message("User #$uid role update: $member_role_op.");
//		}
	}
}

/**
 * Calculate membership status
 */
function afo_member_get_status($uid) {
	if(!is_numeric($uid)) return false;
	
	if($uid === 0) return array('status' => 0);
	
	$payments = afo_member_get_payments(array('uid' => $uid, 'order'=>'asc'));
	
	if(!$payments) return array('status' => 1); // no payments = artist user

	$membership_ends = 0;	
	$membership_pending = 0;	
	foreach($payments as $p) {
		switch($p->payment_status) {
			case 1:
				// payment pending  
				if($p->timestamp > $membership_pending) $membership_pending = $p->timestamp;
				$membership_pending += ($p->extend_membership * 24 * 60 * 60); // add extension in seconds
				break;

			case 2:
				// paid
				if($p->timestamp > $membership_ends) $membership_ends = $p->timestamp;
				$membership_ends += ($p->extend_membership * 24 * 60 * 60); // add extension in seconds
				break;
				
		}
	}
	
	$data['membership ends'] = $membership_ends;
	$data['membership pending'] = $membership_pending;
	
	if($membership_ends >= time()) $data['status'] = 2; // member
	elseif($membership_pending >= time()) $data['status'] = 4; // pending
	else $data['status'] = 3; // lapsed
	
	return $data;
}

/**
 * Editor payment form: Call form validate and submit
 */
function afo_member_create_payment_form_validate($form, &$form_state) {
	module_load_include('inc', 'afo_member', 'afo_member.editor');
	_afo_member_create_payment_form_validate($form, &$form_state);
}
function afo_member_create_payment_form_submit($form, &$form_state) {
	module_load_include('inc', 'afo_member', 'afo_member.editor');
	_afo_member_create_payment_form_submit($form, &$form_state);
}

/**
 * Editor search payments form: call submit
 */
function afo_member_search_payments_form_submit($form, &$form_state) {
	module_load_include('inc', 'afo_member', 'afo_member.editor');
	_afo_member_search_payments_form_submit($form, &$form_state);
}

/**
 * Membership comparison table
 */
function afo_member_comparison_table() {
	module_load_include('inc', 'afo_member', 'afo_member.benefits');
	return _afo_member_comparison_table();
}


/********************************** db functions **/

/**
 * Add payment
 */
function afo_member_add_payment($args = array()) {

	global $user;
	$payment_uid = is_numeric($args['uid']) ? $args['uid'] : $user->uid;
	
	if($args['op'] == 'delete') {
		if(is_numeric($args['payment_id'])) {
			$delete = db_query('DELETE FROM {afo_member_payments} WHERE payment_id = %d', $args['payment_id']);
			if($delete) drupal_set_message('Payment successfully deleted.');
		}
	
	} else {
	
		$record = new stdclass;
		$record->payment_id = is_numeric($args['payment_id']) ? $args['payment_id'] : null;
		$record->uid = $payment_uid;
		$record->timestamp = time();
		$record->extend_membership = is_numeric($args['extend_membership']) ? $args['extend_membership'] : 0;
		$record->payment_total = is_numeric($args['payment_total']) ? $args['payment_total'] : null;
		$record->payment_status = is_numeric($args['payment_status']) ? $args['payment_status'] : null;
		$record->payment_order_id = is_numeric($args['payment_order_id']) ? $args['payment_order_id'] : 0;
	
		if($record->payment_id) drupal_write_record('afo_member_payments', $record, 'payment_id');
		else drupal_write_record('afo_member_payments', $record);

	}
	
	afo_member_update_role($payment_uid);

}

/**
 * Add payment called from UC trigger
 */
function afo_member_add_payment_from_uc($order, $settings) {
	if(!is_numeric($order->order_id)) return null;
	if(!is_numeric($order->uid)) return null;
	
	if($order->order_status == 'completed') $payment['payment_status'] = 2; // paid
	else $payment['payment_status'] = 1; // pending
	
	// get values from order object
	$payment['payment_order_id'] = $order->order_id;
	$payment['uid'] = $order->uid;
	$payment['payment_total'] = round($order->order_total, 2);
	
	// calculate extend_membership:
	$product_count = $order->product_count;
	$extend_per = variable_get('afo_member_extend_per_purchase', 365);
	$payment['extend_membership'] = $product_count * $extend_per;
	
	// check existing
	$payment_id = db_result(db_query('SELECT payment_id FROM {afo_member_payments} WHERE payment_order_id = %d', $order->order_id));
	if(is_numeric($payment_id)) $payment['payment_id'] = $payment_id;
	
	// add payment
	afo_member_add_payment($payment);

	// diagnostic
	dsm($order);
	dsm($payment);
	watchdog('member', 'Member payment logged for order id '.$order->order_id, null, 3);
	
}

/**
 * Get payments
 */
function afo_member_get_payments($args = array()) {

	$q['select'][] = 'p.*, u.name, u.mail'; 
	$q['count select'] = 'COUNT(p.payment_id) AS total';
	$q['from'] = '{afo_member_payments} p';
	$q['joins'][] = 'INNER JOIN {users} u ON u.uid = p.uid';

	if(db_table_exists('uc_orders')) {
		$q['select'][] = 'orders.order_total';
		$q['joins'][] = 'LEFT JOIN {uc_orders} orders ON orders.order_id = p.payment_order_id';	
	}
	
	if($args['order'] == 'asc') $q['order'][] = 'p.timestamp ASC';
	else $q['order'][] = 'p.timestamp DESC';

	if(is_numeric($args['payment_id'])) {
		$q['where'][] = 'p.payment_id = %d AND ';
		$q_args[] = $args['payment_id'];
	}
	
	if(is_numeric($args['uid'])) {
		$q['where'][] = 'p.uid = %d AND ';
		$q_args[] = $args['uid'];
	}
	

	if($args['name']) {
		$q['where'][] = 'u.name LIKE \'%%%s%%\' AND ';
		$q_args[] = filter_xss($args['name'], array());
	}

	if($args['email']) {
		$q['where'][] = 'u.mail = \'%s\' AND ';
		$q_args[] = filter_xss($args['email'], array());
	}
	
	$q = afo_backend_buildquery($q);
	if(!$q) return false;

	$query = db_query($q['sql'], $q_args);
	while($row = db_fetch_object($query)) {
		$data[] = $row;
	}
	
	return $data;
}