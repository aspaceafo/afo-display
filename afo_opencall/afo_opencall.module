<?php
// $Id$

/**
 * @file
 *
 * Adds custom functionality for open call system on AFO site.
 */

/******************************************** drupal functions **/
 
/**
 * Implementation of hook_menu().
 */
function afo_opencall_menu() {
	$items['admin/settings/afo/opencall'] = array(
		'title' => 'AFO Open Call Settings',
		'description' => 'Admin settings for AFO Open Call module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('afo_opencall_admin_settings'),
		'file' => 'afo_opencall.admin.inc',
		'access arguments' => array('administer content'),
		'type' => MENU_LOCAL_TASK,
	);

	$items['calls'] = array(
		'title' => 'Open Calls',
		'description' => 'Calls for artwork submissions to curated exhibitions',
		'page callback' => 'afo_opencall_callspage',
		'file' => 'afo_opencall.page.inc',
		'access arguments' => array('access content'),
		'type' => MENU_NORMAL_ITEM,
	);
	
	$items['calls/ajax'] = array(
		'page callback' => 'afo_opencall_list_calls',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

	$items['calls/submit'] = array(
		'title' => 'Submit to Open Call',
		'description' => 'Send a selection of your artwork to the curator',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('afo_opencall_submitto'),
		'file' => 'afo_opencall.submit.inc',
		'access arguments' => array('submit to calls'),
		'type' => MENU_CALLBACK,
	);
	
	$items['calls/ignore'] = array(
		'title' => 'Ignore submission',
		'page callback' => 'afo_opencall_ignore',
		'file' => 'afo_opencall.curate.inc',
		'access arguments' => array('curate own calls'),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}

/**
 * Implementation of hook_perm().
 */
function afo_opencall_perm() {
  return array('submit to calls', 'curate own calls');
}

/**
 * Implementation of hook_form_alter(). Alter the exhibition node form.
 */
function afo_opencall_form_alter(&$form, $form_state, $form_id) {
	// check if open call type node form:
	if($form['#node']->type == variable_get('afo_settings_types_opencall', 'none')) {
		module_load_include('inc', 'afo_opencall', 'afo_opencall.curate');
		afo_opencall_callformalter($form, $form_state);
	}
}
/**
 * Open call node form submit: call function
 */
function afo_opencall_callformsubmit($form, &$form_state) {
	module_load_include('inc', 'afo_opencall', 'afo_opencall.curate');
	_afo_opencall_callformsubmit($form, $form_state);
}

/**
 * Submit to call form validate: call function
 */
function afo_opencall_submitto_validate($form, &$form_state) {
	module_load_include('inc', 'afo_opencall', 'afo_opencall.submit');
	_afo_opencall_submitto_validate($form, $form_state);
}
/**
 * Submit to call form submit: call function
 */
function afo_opencall_submitto_submit($form, &$form_state) {
	module_load_include('inc', 'afo_opencall', 'afo_opencall.submit');
	_afo_opencall_submitto_submit($form, $form_state);
}

/**
 * Implementation of hook_nodeapi
 */
function afo_opencall_nodeapi(&$node, $op, $a3, $a4) {
	if($node->type == variable_get('afo_settings_types_opencall', 'none')) {
		switch($op) {
			case 'load':
				// load call data into node object
				$call_data = afo_opencall_get_call($node->nid);
				if($call_data) $node->call_data = $call_data;
				break;
		
			case 'view':
				// add open call display fields
				module_load_include('inc', 'afo_opencall', 'afo_opencall.display');	
				afo_opencall_nodedisplay($node);
				break;
		
			case 'insert':
				// set open call data for new node, since form_submit function didn't get the new nid
				if(is_numeric($node->nid)) {
					module_load_include('inc', 'afo_opencall', 'afo_opencall.curate');	
					$call = new stdclass;
					$call->nid = $node->nid;
					$call->deadline = $node->deadline;
					$call->limit = $node->limit;
					afo_opencall_update_call($call);
				}
				break;		
		}
	}
}

/**
 * Implementation of hook_theme.
 */
function afo_opencall_theme() {
	return array(
		'afo_opencall_listing' => array(
			'arguments' => array(
				'data' => null,
				'op' => 'short',
			),
			'file' => 'afo_opencall.display.inc',
		),
		'afo_opencall_list' => array(
			'arguments' => array(
				'list' => null,
				'op' => 'short',
				'title' => null,
			),
			'file' => 'afo_opencall.display.inc',
		),
		'afo_opencall_submitto_artworktable' => array(
			'arguments' => array(
				'element' => null,
			),
			'file' => 'afo_opencall.submit.inc',
		),
	);
}

/**
 * Implementation of hook_user.
 * Add open calls list to user page.
 */
function afo_opencall_user($op, &$edit, &$account, $category = NULL) {
	switch($op) {
		case 'view':
			$options = array(
				'args' => array('uid' => $account->uid), 
				'theme' => 'table',
				'empty as null' => true,
			);
			$calls = afo_opencall_list_calls($options);
			if($calls) {
				$account->content['open-calls'] = array(
					'#type' => 'user_profile_item',
					'#title' => $account->name . t('\'s open calls'),
					'#weight' => -8,
					'#value' => $calls,
				);
			}
			break;
	}
}


/******************************************** display functions **/

/**
 * Display list of recent open call submissions
 */
function afo_opencall_list_submissions($uid, $title = 'Recent Submissions') {
	if(!is_numeric($uid)) return false;
	
	$calls = afo_opencall_get_calls(array('uid'=>$uid));
	if(!is_array($calls)) return false;

	foreach($calls as $call) {
		$submissions = afo_opencall_get_submissions($call->nid, null, true);

		if(is_array($submissions)) {
			$recentSubs = array();
			foreach($submissions as $sub) {
				$recentSubs[] = $sub->name . ' <span class="secondaryText">(' . format_date($sub->updated, 'small') .')</span>';
			}
			$theList = l($call->title, 'node/'.$call->nid);
			$theList .= theme('item_list', $recentSubs, null, 'ul', array('class'=>'tightList'));
			$sublist[] = $theList;
		}
	}

	if(is_array($sublist)) {
		return theme('item_list', $sublist, t($title), 'ul', array('class'=>'arrow'));
	}
	else return null;
}

/**
 * Return rendered, paged list of open calls, with criteria options
 */
function afo_opencall_list_calls($options = array()) {

	if(!empty($_POST['js'])) {
		$ajax = true;
		$options['args'] = $_POST;
		$options['theme'] = 'table';
	}

	$q = afo_opencall_calls_query($options['args']);
	if(!$q) return null;
	
	if(!is_numeric($options['pager num'])) $options['pager num'] = 0;
	if(!is_numeric($options['per page'])) $options['per page'] = 10;
	
	$query = pager_query($q['sql'], $options['per page'], $options['pager num'], $q['count sql'], $q['args']);
	
	while($row = db_fetch_object($query)) {
		if(strlen($row->title) > 0) {
			$data[] = $row;
		}
	}

	/*
	// attached query: admin
	$content['query'] = array(
		'#value' => $options['args']['deadline'] . '<br />' . $q['sql'] . '<br />' . implode(', ', $q['args']),
	);
	*/
	
	if(is_array($data)) {
		// theme list	
		if($options['theme'] == 'table') $list_content = theme('afo_display_table', $data, $options['title'], 'open calls');
		else $list_content = theme('afo_opencall_list', $data, $options['display op'], $options['title']);
		$content['opencall-list'] = array(
			'#value' => $list_content,
		);
	
		$content['opencall-list-pager'] = array(
			'#value' => theme('pager', null, $options['per page'], $options['pager num']),
			'#weight' => 1,
		);
	}
	else {
		if($options['empty as null']) return null;
		$content = array(
			'#value' => t('No open calls found.'),
		);
	}
	
	if($ajax) {
		drupal_json(
			array(
				'data' => drupal_render($content),
			)
		);
	}
	else return drupal_render($content);
}
/**
 * Form submit for build filters form
 */
function afo_opencall_callspage_buildfilters_submit($form, &$form_state) {
	$filters = $form_state['values']['opencall-filters'];
	foreach($filters as $k => $v) {
		if($v) {
			$args[] = "$k=$v";
		}
	}
	$args = implode('&', $args);
	drupal_goto('calls', $args);
}

/******************************************** db functions **/

/**
 * Get open call data
 */
function afo_opencall_get_call($nid) {
	if(!is_numeric($nid)) return false;
	$query = db_query('SELECT * FROM {afo_opencall_calls} WHERE nid = %d', $nid);
	if($result = db_fetch_object($query)) return $result;
	else return false;
}

/**
 * Get array of calls
 */
function afo_opencall_get_calls($args) {
	$q = afo_opencall_calls_query($args);
	if(!$q) return null;
	
	$query = db_query($q['sql'], $q['args']);
	
	while($row = db_fetch_object($query)) $data[] = $row;
	
	return $data;
}

/**
 * Get open calls ending soon
 */
function afo_opencall_calls_query($args = array()) {

	// base query
	//$q['select'][] = 'DISTINCT(calls.nid), calls.*, n.title, u.uid, u.name';
	$q['select'][] = 'calls.*, n.title, u.uid, u.name';
	$q['count select'] = 'COUNT(calls.nid)';
	$q['from'] = '{afo_opencall_calls} calls';
	$q['joins'][] = 'LEFT JOIN {node} n ON n.nid = calls.nid';
	$q['joins'][] = 'LEFT JOIN {users} u ON u.uid = n.uid';
	//$q['where'][] = 'n.status = 1 AND ';
	$q['order'][] = 'calls.deadline ASC';
	
	// add body if not short
	if($args['display op'] != 'short') {
		$q['select'][] = 'r.body';
		$q['joins'][] = 'LEFT JOIN {node_revisions} r ON r.vid = n.vid';
	}			

	// add deadline later than now unless specified
	switch($args['deadline']) {
		case '3 months':
			$q['where'][] = 'calls.deadline > %d AND calls.deadline < %d AND ';
			$q_args[] = time();
			$q_args[] = strtotime('+3 months');
			break;

		case '3-6 months':
			$q['where'][] = 'calls.deadline > %d AND calls.deadline < %d AND ';
			$q_args[] = strtotime('+3 months');
			$q_args[] = strtotime('+6 months');
			break;

		case '6 months':
			$q['where'][] = 'calls.deadline > %d AND ';
			$q_args[] = strtotime('+6 months');
			break;
		
		case 'past':
			$q['where'][] = 'calls.deadline < %d AND ';
			$q_args[] = time();
			break;

		default:
			// all upcoming is default
			$q['where'][] = 'calls.deadline > %d AND ';
			$q_args[] = time();
	}
	
	// add where uid = $arg if uid included in args 
	if(is_numeric($args['uid'])) {
		$q['where'][] = 'u.uid = %d AND '; 
		$q_args[] = $args['uid'];
	}
	
	// specific nid if included in args -- used for getting data on one open call
	if(is_numeric($args['nid'])) {
		$q['where'][] = 'calls.nid = %d AND ';
		$q_args[] = $args['nid'];
	}

	// add medium
	if(is_numeric($args['medium'])) {
		$q['joins'][] = 'LEFT JOIN {term_node} mediums ON mediums.nid = calls.nid';
		$q['where'][] = 'mediums.tid = %d AND ';
		$q_args[] = $args['medium'];
	}
	
	// add tag
	if(is_numeric($args['tag'])) {
		$q['joins'][] = 'LEFT JOIN {term_node} tags ON tags.nid = calls.nid';
		$q['where'][] = 'tags.tid = %d AND ';
		$q_args[] = $args['tag'];
	}

	// add multiple terms
	if(is_array($args['terms'])) {
		$q['joins'][] = 'LEFT JOIN {term_node} terms ON terms.nid = calls.nid';
		foreach($args['terms'] as $tid) {
			$terms_where[] = 'terms.tid = %d';
			$q_args[] = $tid;
		}
		$q['where'][] = '(' . implode(' OR ', $terms_where) . ')';
	}

	// get city tid
	if(is_numeric($args['city'])) {
		$city_tid = $args['city'];
	}
	else if(strlen($args['city']) > 0) {
		$city_vid = variable_get('afo_profile_city_vid', null);
		$city_tid = db_result(db_query('SELECT tid FROM {term_data} WHERE vid = %d AND name LIKE \'%%%s%%\'', $city_vid, $args['city']));
		if(!$city_tid) return null;
	}
	// add city to query
	if(is_numeric($city_tid)) {
		$q['joins'][] = 'LEFT JOIN {term_node} cities ON cities.nid = calls.nid';
		$q['where'][] = 'cities.tid = %d AND ';
		$q_args[] = $city_tid;
	}

	// add online submit only
	if($args['online-submit'] == 1) {
		$q['where'][] = 'calls.submitlimit > %d AND ';
		$q_args[] = 0;
	}
	
	$query = afo_backend_buildquery($q);

	if(!$query) return null;

	$query['args'] = $q_args;
		
	return $query;
}

/**
 * Get submissions
 */
function afo_opencall_get_submissions($call_nid, $uid = null, $ignore = false) {
	if(!is_numeric($call_nid)) return null;
	
	if($ignore) $ignoreClause = ' AND sub.curator_seen <> 1';
	
	if(is_numeric($uid)) {
		$query = db_query('SELECT
		sub.*, u.name
		FROM {afo_opencall_submissions} sub
		LEFT JOIN {users} u ON u.uid = sub.uid
		WHERE sub.nid = %d AND sub.uid = %d '.$ignoreClause.'
		ORDER BY sub.curator_seen ASC, sub.updated DESC
		', $call_nid, $uid);
	}
	else {
		$query = db_query('SELECT
		sub.*, u.name
		FROM {afo_opencall_submissions} sub
		LEFT JOIN {users} u ON u.uid = sub.uid
		WHERE sub.nid = %d '.$ignoreClause.'
		ORDER BY sub.curator_seen ASC, sub.updated DESC
		', $call_nid);
	}
	
	while ($row = db_fetch_object($query)) {
		$row->artworks = afo_opencall_get_submission_artworks($row->submission_id);
		$submissions[] = $row;
	}
	
	return $submissions;
}

/**
 * Get submission artworks
 */
function afo_opencall_get_submission_artworks($submission_id) {
	if(!is_numeric($submission_id)) return null;
	
	$query = db_query('SELECT
	art.artwork_nid
	FROM {afo_opencall_submissions_artworks} art
	WHERE art.submission_id = %d
	', $submission_id);
	
	while ($row = db_fetch_object($query)) {
		$artworks[] = $row->artwork_nid;
	}
	
	return $artworks;
}


/**
 * Check if user allowed to submit to open call
 */
function afo_opencall_check_submit_allowed($node, $user, $op='message') {
	if(!is_object($node) || !is_object($user)) return false;

	// check if deadline has passed
	if($node->call_data->deadline < time()) {
		$message = t('The submission deadline for this open call has already passed.');
	}

	// check if no online submission
	if($node->call_data->submitlimit == 0) {
		$message = t('This open call does not accept online submissions through local-artists.org. Please read the call details for information on submission.');
	}
	
	// check if user has already submitted
	$existing = afo_opencall_get_submissions($node->nid, $user->uid);
	if($existing) {
		$message = t('You have already submitted to this open call.');
	}

	if($message) {
		// assign message based on $op
		switch($op) {
			case 'text':
				return $message;
				break;
		
			case 'form_error':
				form_set_error('', $message);
				break;
				
			case 'message':
				drupal_set_message($message, 'error');
				break;
		}
		
		return false;
	}
	
	return true;
}


