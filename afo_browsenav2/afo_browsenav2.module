<?php
// $Id$

/**
 * @file
 *
 * Adds navigation elements for browsing through views.
 */

/************************************************ SETTINGS */

/**
 * Query parameter data.
 */
function afo_browsenav2_parameter_schema() {

	$schema['start'] = array(
		'default' => 'main',
	);	

	$schema['type'] = array(
		'label' => 'Type',
		'default' => 'artwork',
		'options' => array(
			'artwork' => 'artwork',
			'artists' => 'artists',
			'members' => 'members',
			//'exhibitions' => 'exhibitions',
			//'open calls' => 'open calls',
		),
		'attributes' => array(
			'column no close' => TRUE,
		),
	);
	if(!user_access('perform member searches')) unset($schema['type']['options']['members']);

/*
	$schema['op'] = array(
		'default' => 'inclusive',
		'options' => array(
			'inclusive' => 'inclusive',
			'exclusive' => 'exclusive',
		),
		'attributes' => array(
			'column no open' => TRUE,
		),
	);
*/

	$schema['sort'] = array(
		'label' => 'Sorting',
		'default' => 'popular',
		'options' => array(
			'popular' => 'popular',
			'new' => 'new',
			//'random' => 'random',
		),
		'attributes' => array(
			'column no open' => TRUE,
		),
	);
	
	$schema['tags'] = array(
		'multiple' => TRUE,
	);
	
	$schema['regions'] = array(
		'label' => 'Regions',
		'multiple' => TRUE,
	);

	$schema['city'] = array(
		'label' => 'City',
		'multiple' => FALSE,
	);

	$schema['textsearch'] = array(
		'label' => 'Text Search',
		'multiple' => false,
	);

	$schema['textsearchtype'] = array(
		'label' => 'Text Search Type',
		'multiple' => false,
		'default' => 'names',
		'options' => array(
			'names' => 'artist names',
			'venue' => 'CVs: any',
			'galleries' => 'CVs: galleries',
			'schools' => 'CVs: schools',
		),
	);
	
	return $schema;
}


/************************************************ DRUPAL FUNCTIONS */

/**
 * Initialization functions. Runs when browse pages are loaded. 
 */
function afo_browsenav2_runinit($op = 'normal') {

	// add to all:
	drupal_add_js(drupal_get_path('module', 'afo_browsenav2').'/afo_browsenav2.results.js');

	// widget included
	if($op != 'content only') {
		drupal_add_js(drupal_get_path('module', 'afo_browsenav2').'/afo_browsenav2.js');
		drupal_add_css(drupal_get_path('module', 'afo_browsenav2').'/afo_browsenav2.css');
		jquery_ui_add(array('effects.core', 'effects.slide'));
		drupal_add_css('sites/all/plugins/jquery/jquery-treeview/jquery.treeview.css');
		drupal_add_js('sites/all/plugins/jquery/jquery-treeview/jquery.treeview.min.js');
		
		//test add 03-21-13 to fix search
		drupal_add_js('sites/all/libraries/jquery-ui/ui/minified/ui.core.min.js', $type='module', $scope = 'footer');
		drupal_add_js('sites/all/libraries/jquery-ui/ui/minified/ui.draggable.min.js', $type='module', $scope = 'footer');
		drupal_add_js('sites/all/libraries/jquery-ui/ui/minified/ui.droppable.min.js', $type='module', $scope = 'footer');
  	    drupal_add_js('sites/all/libraries/jquery-ui/ui/minified/ui.sortable.min.js', $type='module', $scope = 'footer');
	}
}

/**
 * Implements hook_perm
 */
function afo_browsenav2_perm() {
	return array('perform member searches');
}

/**
 * Implementation of hook_menu().
 */
function afo_browsenav2_menu() {

	$items['browse'] = array(
		'title' => 'Browse',
		'description' => 'Search through Local Artists',
		'page callback' => 'afo_browsenav2_browse_page',
		'access arguments' => array('access content'),
		'file' => 'afo_browsenav2.page.inc',
	);

	$items['admin/settings/afo/browsenav2'] = array(
		'title' => 'AFO BrowseNav2 Settings',
		'description' => 'Browsing home page or current search',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('afo_browsenav2_admin_settings'),
		'access arguments' => array('administer content'),
		'file' => 'afo_browsenav2.admin.inc',
		'type' => MENU_LOCAL_TASK,
	);

	$items['browse/preview'] = array(
		'title' => 'Browse Query Results Preview',
		'page callback' => 'afo_browsenav2_results_preview',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);

/*	
	$items['browsenav/portfolio-preview'] = array(
		'page callback' => 'afo_browsenav_portfolio_preview',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
*/	
	return $items;
}

/**
 * Init functions for browsenav2 browsing page.
 */
function afo_browsenav2_browseinit() {
	jquery_ui_add(array('ui.draggable', 'ui.resizable', 'ui.dialog'));
}

/**
 * Implementation of hook_block().
 */
function afo_browsenav2_block($op = 'list', $delta = 0, $edit = array()) {
	switch($op) {
	
		case 'list':
			$blocks[0]['info'] = t('afo_browsenav2: Navigation Widget');
			$blocks[0]['cache'] = BLOCK_NO_CACHE;
			
			return $blocks;
			
		case 'view':
			switch($delta) {

				// browsenav2 options block
				case 0:
					$block = afo_browsenav2_buildwidget();
					return $block;
					
			}
			break;
	}
}

/***************************************** Browsenav embed **/

/**
 * Embed browsenav results grid
 */
function afo_browsenav2_embed_results($args, $op = 'normal', $more = true) {
	if(empty($args)) return null;
	
	afo_browsenav2_runinit('content only');

	$args = explode('/', $args);
	$more_url = afo_browsenav2_args_to_URL($args);
	$params = afo_browsenav2_args_to_params($args);

	/**** Get query ****/
	$pager_num = 0;
	$per_page = 12;
	$range = afo_backend_pager_calculate($per_page, $pager_num);
	$range = $range['start'] . ', ' . $per_page;
	module_load_include('inc', 'afo_browsenav2', 'afo_browsenav2.db');
	$q = afo_browsenav2_build_query_optimized($params, array('range'=>$range));

	/**** Output query result ****/
	if(is_array($q)) {
		
		$result = db_query($q[0], $q[1]);

		while($row = db_fetch_array($result)) {
			$results[] = $row;
		}
		
		$content .= theme('afo_display_grid', $results, null, $params['type'][0], array('classes'=>array('tightGrid'), '#expandable'=>true));
	
		if($more && $more_url) $content .= l(t('See more Â»'), $more_url); 
	}

	/**** Return content ****/
	if($content) return $content;
	else return null;	
}


/***************************************** Browsenav utilities **/

/**
 * Preview results function
 */
function afo_browsenav2_results_preview() {

	$page_args = func_get_args();
	if(count($page_args) === 0) {
		$page_args = explode('/', $_SESSION['afo_browsenav2_search_args']);
	}
	$params = afo_browsenav2_args_to_params($page_args);

	/**** Get query ****/
	module_load_include('inc', 'afo_browsenav2', 'afo_browsenav2.db');
	$q = afo_browsenav2_build_query_optimized($params);

	if(is_array($q)) {
		
		$total = db_result(db_query($q[2], $q[1]));
		
		drupal_json(array(
			'total' => $total,
		));
		
	}
}

/**
 * Convert URL arguments to parameters array.
 */
function afo_browsenav2_args_to_params(array $arguments) {

	foreach($arguments as $argument) {
		$argument = afo_browsenav2_makeSafe($argument);
		$argument = explode('=', $argument);
		if(count($argument) == 2) {
			 $arg_values = explode(',', $argument[1]);
			 foreach($arg_values as $v) {
			 	if($v) {
					$params[$argument[0]][] = $v;
				}
			}
		}
	}

	// make sure arrays present and add defaults if values are missing	
	$parameter_schema = afo_browsenav2_parameter_schema();
	foreach($parameter_schema as $key => $data) {
	
		// check if param is array
		if(!is_array($params[$key])) $params[$key] = array();
		
		// add default if empty
		if($data['default'] && count($params[$key])===0) {
			$params[$key] = array($data['default']);
		}
	}
	
	return $params;
}

/**
 * Convert parameters array to URL arguments.
 */
function afo_browsenav2_params_to_args(array $params, $change=NULL) {
	if(is_array($change)) {
		// alter params if change array is present
		$params = afo_browsenav2_params_alter($params, $change);
	}
	
	$arguments = array();
	foreach($params as $key => $param) {
		$key = afo_browsenav2_makeSafe($key);
		$param = implode(',', $param);
		$param = afo_browsenav2_makeSafe($param);
		$argument = $key . '=' . $param;
		$arguments[] = $argument;
	}
	return $arguments;
}

/**
 * Convert arguments link URL.
 */
function afo_browsenav2_args_to_URL($arguments) {
	$URL = 'browse/';
	$URL .= implode('/', $arguments);
	return $URL;
}

/**
 * Clean input for safe use.
 */
function afo_browsenav2_makeSafe($variable) {
	$variable = htmlentities($variable, ENT_QUOTES);
  	
	if (get_magic_quotes_gpc()) { 
		$variable = stripslashes($variable); 
	}
  	
	$variable = mysql_real_escape_string(trim($variable));
 	$variable = strip_tags($variable);
	$variable = str_replace("\r\n", "", $variable);
 	
	return $variable;
}


